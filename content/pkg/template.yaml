AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Metadata:
  AWS::ServerlessRepo::Application:
    Name: Dassana
    Description: |
      Dassana adds contexts to AWS security hub alerts and priortizes alerts based on contexual risk. The context is addded
      by Dassana Actions which are open source lightweight lambda functions.
    Author: Dassana
    SpdxLicenseId: Apache-2.0
    HomePageUrl: https://github.com/dassana-io/dassana
    SourceCodeUrl: https://github.com/dassana-io/dassana
    SemanticVersion: 1.0.0 # do not change this, it is meant to be overridden when use "sam publish" cli to publish an updated version
    ReadmeUrl: ../../README.md
    LicenseUrl: ../../LICENSE.txt

Parameters:
  CrossAccountRoleName:
    Description: If this account is going receive alerts from other accounts i.e. this is a central security account, enter the name of the cross account role which exists in this account and has permissions to assume role into the accounts from which alerts are received. For more information visit https://docs.dassana.io/docs/getting-started/installation
    Type: String
    Default: ""

Conditions:
  CreateCrossAccountRole: !Not [!Equals [!Ref CrossAccountRoleName, ""]]

Resources:
  ### Begin Dassana Engine Resources ###
  OptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      AuthorizationType: NONE
      RestApiId:
        Ref: ApiGatewayRestApi
      ResourceId:
        Ref: ProxyApiResource
      HttpMethod: OPTIONS
      Integration:
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,x-api-key,x-dassana-cache'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS,GET,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ""
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        Type: MOCK
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: "Empty"
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: false
            method.response.header.Access-Control-Allow-Methods: false
            method.response.header.Access-Control-Allow-Origin: false

  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      ApiKeySourceType: HEADER
      Description: Dassana API Gateway for debugging and updating workflows.
      EndpointConfiguration:
        Types:
          - REGIONAL
      Name: !Join ["", [{ "Ref": "AWS::StackName" }, "-api"]]

  ProxyApiResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId
      PathPart: "{proxy+}"

  ApiGatewayModel:
    Type: AWS::ApiGateway::Model
    Properties:
      ContentType: "application/json"
      RestApiId: !Ref ApiGatewayRestApi
      Schema: {}

  ApiGatewayStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGatewayDeployment42
      Description: Lambda API Stage v1
      RestApiId: !Ref ApiGatewayRestApi
      StageName: v1

  ApiUsagePlan:
    Type: "AWS::ApiGateway::UsagePlan"
    DependsOn: ProxyResource
    Properties:
      ApiStages:
        - ApiId: !Ref ApiGatewayRestApi
          Stage: !Ref ApiGatewayStage
      Description: !Join [" ", [{ "Ref": "AWS::StackName" }, "usage plan"]]
      UsagePlanName: !Join ["", [{ "Ref": "AWS::StackName" }, "-usage-plan"]]

  ApiGatewayDeployment42:
    Type: AWS::ApiGateway::Deployment
    DependsOn: ProxyResource
    Properties:
      Description: Lambda API Deployment
      RestApiId: !Ref ApiGatewayRestApi

  DassanaEngineApiInvokePermissionForApiGw:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref DassanaEngineApi
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApi}/*/*/*"

  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: !Join ["", [{ "Ref": "AWS::StackName" }, "-apikey"]]
      Description: !Join ["", [{ "Ref": "AWS::StackName" }, "api key"]]
      Enabled: true
      GenerateDistinctId: false

  ApiUsagePlanKey:
    Type: "AWS::ApiGateway::UsagePlanKey"
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref ApiUsagePlan

  MockMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !GetAtt ApiGatewayRestApi.RootResourceId
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK

  ProxyResource:
    Type: "AWS::ApiGateway::Method"
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      ResourceId: !Ref ProxyApiResource
      HttpMethod: ANY
      ApiKeyRequired: true
      AuthorizationType: NONE
      OperationName: !Ref ProxyApiResource
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DassanaEngineApi.Arn}/invocations"

  DassanaEngineApi:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: app.dassana.core.restapi.Application
      Layers:
        - !Ref DassanaEngineJavaLayer
      Runtime: java11
      MemorySize: 1024
      CodeUri: ../../engine
      Role:
        Fn::GetAtt: [DassanaEngineRole, Arn]
      Timeout: 300
      Environment:
        Variables:
          dassanaDeadLetterQueue: !Ref DassanaDeadLetterQueue
          dassanaCrossAccountRoleName: !Ref CrossAccountRoleName
          dassanaBucket: !Ref DassanaBucket
          dassanaEventBridgeBusName: !Ref DassanaEventBus
          dassanaStackName: !Ref AWS::StackName
          version: __version-to-be-replaced-by-cicd__

  DassanaBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain

  DassanaEngineRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Join ["", [{ "Ref": "AWS::StackName" }, "-DassanaEngineRole"]]
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: DassanaEnginePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Fn::If:
                  - CreateCrossAccountRole
                  - Effect: "Allow"
                    Action:
                      - "sts:AssumeRole"
                    Resource:
                      - !Sub arn:aws:iam::*:role/${CrossAccountRoleName}
                  - Ref: AWS::NoValue

              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub arn:aws:s3:::${DassanaBucket}/*
                  - !Sub arn:aws:s3:::${DassanaBucket}
              - Effect: Allow
                Action:
                  - cloudformation:Describe*
                  - cloudformation:List*
                  - cloudformation:Get*
                  - logs:CreateLogGroup # todo: create a log group via this CFT and restrict access
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - lambda:InvokeFunction #todo: restrict lambda invocation permission to only Dasssana functions
                  - lambda:GetFunction
                Resource: "*"
              - Effect: Allow
                Action:
                  - events:PutEvents
                Resource:
                  - "*" #todo restrict it to the custom bus we create

              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource:
                  - !GetAtt DassanaInboundQueue.Arn
                  - !GetAtt DassanaDeadLetterQueue.Arn

  QueuePolicyForEventHub:
    Type: AWS::SQS::QueuePolicy
    Properties:
      Queues:
        - Ref: DassanaUnProcessedAlerts
        - Ref: DassanaInboundQueue
        - Ref: DassanaProcessedAlertsForAwsConfig
        - Ref: DassanaProcessedAlertsForGuardDuty
        - Ref: DassanaProcessedAlertsForPrismaCloud

      PolicyDocument:
        Statement:
          - Action:
              - SQS:SendMessage
            Effect: Allow
            Resource:
              - "*"
            Principal:
              Service: events.amazonaws.com

  DassanaInboundQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        !Join ["", [{ "Ref": "AWS::StackName" }, "-DassanaInboundQueue"]]
      VisibilityTimeout: 300
      RedrivePolicy:
        deadLetterTargetArn:
          Fn::GetAtt:
            - "DassanaDeadLetterQueue"
            - "Arn"
        maxReceiveCount: 2

  DassanaUnProcessedAlerts:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - -DassanaUnProcessedAlerts

  DassanaProcessedAlertsForAwsConfig:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - -DassanaProcessedAlertsForAwsConfig

  DassanaProcessedAlertsForGuardDuty:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - -DassanaProcessedAlertsForGuardDuty

  DassanaProcessedAlertsForPrismaCloud:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        Fn::Join:
          - ""
          - - Ref: AWS::StackName
            - -DassanaProcessedAlertsForPrismaCloud

  DassanaDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName:
        !Join ["", [{ "Ref": "AWS::StackName" }, "-DassanaDeadLetterQueue"]]

  DassanaEventBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Join ["", [{ "Ref": "AWS::StackName" }, "-EventBus"]]

  DassanaEventBridgeToUnprocessedAlerts:
    Type: AWS::Events::Rule
    Properties:
      EventBusName:
        Ref: DassanaEventBus
      EventPattern:
        source:
          - dassana
        detail-type:
          - normalizer_not_found
      Targets:
        - Arn:
            Fn::GetAtt:
              - "DassanaUnProcessedAlerts"
              - "Arn"
          Id: dassana-unprocessed-alerts-queue
          InputPath: $.detail

  DassanaEventBridgeToPrismaCloudSqsQueue:
    Type: AWS::Events::Rule
    Properties:
      EventBusName:
        Ref: DassanaEventBus
      EventPattern:
        source:
          - dassana
        detail-type:
          - prisma-cloud
      Targets:
        - Arn:
            Fn::GetAtt:
              - "DassanaProcessedAlertsForPrismaCloud"
              - "Arn"
          Id: dassana-pc-queue
          InputPath: $.detail

  DassanaEventBridgeToGuardDutySqsQueue:
    Type: AWS::Events::Rule
    Properties:
      EventBusName:
        Ref: DassanaEventBus
      EventPattern:
        source:
          - dassana
        detail-type:
          - guardduty-via-securityhub
      Targets:
        - Arn:
            Fn::GetAtt:
              - "DassanaProcessedAlertsForGuardDuty"
              - "Arn"
          Id: dassana-gd-queue
          InputPath: $.detail

  DassanaEventBridgeToAwsConfigSqsQueue:
    Type: AWS::Events::Rule
    Properties:
      EventBusName:
        Ref: DassanaEventBus
      EventPattern:
        source:
          - dassana
        detail-type:
          - aws-config-via-security-hub
      Targets:
        - Arn:
            Fn::GetAtt:
              - "DassanaProcessedAlertsForAwsConfig"
              - "Arn"
          Id: dassana-aws-config-queue
          InputPath: $.detail

  EventBridgeToSqsIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: SendMessagesToSqs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              Effect: Allow
              Action:
                - sqs:SendMessage
              Resource:
                - "*"

  DassanaEngineJavaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: Layer
      Description: Java Dependencies of Dassana Engine
      ContentUri: ../../engine
      CompatibleRuntimes:
        - java11
    Metadata:
      BuildMethod: makefile

  DassanaEngine:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      Handler: app.dassana.core.launch.SqsHandler
      Layers:
        - !Ref DassanaEngineJavaLayer
      Runtime: java11
      MemorySize: 1024
      CodeUri: ../../engine
      Role:
        Fn::GetAtt: [DassanaEngineRole, Arn]
      Timeout: 300
      Environment:
        Variables:
          dassanaDeadLetterQueue: !Ref DassanaDeadLetterQueue
          dassanaCrossAccountRoleName: !Ref CrossAccountRoleName
          dassanaEventBridgeBusName: !Ref DassanaEventBus
          dassanaBucket: !Ref DassanaBucket
          dassanaStackName: !Ref AWS::StackName

  DassanaEngineToQueueMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn:
        Fn::GetAtt:
          - "DassanaInboundQueue"
          - "Arn"
      FunctionName:
        Fn::GetAtt:
          - "DassanaEngine"
          - "Arn"

  DassanaSecurityHubToSqsRuleForAwsConfig:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Send new alerts generated by aws config via securityhub to Dassana inbound queue
      Name:
        !Join [
          "",
          [
            { "Ref": "AWS::StackName" },
            "-securityhub-to-sqs-rule-for-aws-config",
          ],
        ]
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            UserDefinedFields:
              DASSANA_ALERT_PATH: # when Dassana updates the finding, SecurityHub generates BatchImportFinding event which will cause an infitinte loop so we check if the event we received is the one we actually generated
                - exists: false
            ProductArn:
              - !Sub arn:aws:securityhub:${AWS::Region}::product/aws/securityhub
            Compliance:
              Status:
                - FAILED
                - NOT_AVAILABLE
            RecordState:
              - ACTIVE
            Workflow:
              Status:
                - NEW

      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - "DassanaInboundQueue"
              - "Arn"
          Id: dassana-inboud-queue

  DassanaSecurityHubToSqsRuleForGuardDuty:
    Type: "AWS::Events::Rule"
    Properties:
      Description: Send new alerts generated by guardduty via securityhub to Dassana inboud queue
      Name:
        !Join [
          "",
          [{ "Ref": "AWS::StackName" }, "-securityhub-to-sqs-rule-for-gd"],
        ]
      EventPattern:
        source:
          - aws.securityhub
        detail-type:
          - Security Hub Findings - Imported
        detail:
          findings:
            UserDefinedFields:
              DASSANA_ALERT_PATH: # when Dassana updates the finding, SecurityHub generates BatchImportFinding event which will cause an infitinte loop so we check if the event we received is the one we actually generated
                - exists: false
            ProductArn:
              - !Sub arn:aws:securityhub:${AWS::Region}::product/aws/securityhub
              - !Sub arn:aws:securityhub:${AWS::Region}::product/aws/guardduty
            RecordState:
              - ACTIVE
            Workflow:
              Status:
                - NEW

      State: ENABLED
      Targets:
        - Arn:
            Fn::GetAtt:
              - "DassanaInboundQueue"
              - "Arn"
          Id: dassana-inboud-queue

    ### End Dassana Engine Resources ###
    ### Begin Vendor Specific Actions ###

  SecurityHubUpdateFinding:
    Type: AWS::Serverless::Function
    Properties:
      Handler: app.dassana.action.App
      Runtime: java11
      MemorySize: 256
      CodeUri: ../actions/securityhub-update-finding
      Policies:
      Role:
        Fn::GetAtt: [SecurityHubUpdateFindingRole, Arn]
      Timeout: 60

  SecurityHubUpdateFindingRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      Policies:
        - PolicyName: sh-update-finding
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: "securityhub:BatchUpdateFindings"
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

    ### End Vendor Specific Actions ###
    ### Begin Dassana Actions ###

  DassanaActionsPythonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: Layer
      Description: Dependencies for Dassana Actions
      ContentUri: deps/python/
      CompatibleRuntimes:
        - python3.7
      LicenseInfo: "Apache-2.0"
    Metadata:
      BuildMethod: python3.7
  DassanaMMDBLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: MMDBLayer
      Description:
      ContentUri: deps/mmdb
  DassanaWorkflowLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: WorkflowLayer
      Description:
      ContentUri: ../workflows/csp
  DassanaActionsRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/SecurityAudit
        - arn:aws:iam::aws:policy/job-function/ViewOnlyAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  GetTags:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handler.handle
      Runtime: python3.8
      MemorySize: 256
      CodeUri: ../actions/get-tags
      Layers:
        - !Ref DassanaActionsPythonLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60
  WebsiteContext:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handle
      Runtime: python3.7
      CodeUri: ../actions/website-context
      Layers:
        - !Ref DassanaActionsPythonLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60
  WhatEnisAreAttachedToSg:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler_what_enis_are_attached_to_sg.py.handle
      Runtime: python3.7
      CodeUri: ../actions/what-enis-are-attached-to-sg
      Layers:
        - !Ref DassanaActionsPythonLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60
  DecorateIp:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handler.handle
      Runtime: python3.7
      CodeUri: ../actions/decorate-ip
      Layers:
        - !Ref DassanaActionsPythonLayer
        - !Ref DassanaMMDBLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60
  WhatIsEc2Exposure:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handler.handle
      Runtime: python3.7
      CodeUri: ../actions/what-is-exposure-of-ec2-instance
      Layers:
        - !Ref DassanaActionsPythonLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60

  GetEc2InstanceIAMrole:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handler.handle
      Runtime: python3.7
      CodeUri: ../actions/what-is-ec2-role
      Layers:
        - !Ref DassanaActionsPythonLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60

  GetIAMPolicyRisks:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handle
      Runtime: python3.7
      CodeUri: ../actions/get-iam-policy-risks
      MemorySize: 2056
      Layers:
        - !Ref DassanaActionsPythonLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60

  GetBucketStats:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handler.handle
      Runtime: python3.7
      CodeUri: ../actions/get-bucket-stats
      Layers:
        - !Ref DassanaActionsPythonLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60

  PrismaCloudExtractor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handler.handle
      Runtime: python3.8
      MemorySize: 128
      Layers:
        - !Ref DassanaActionsPythonLayer
      CodeUri: ../actions/prisma-cloud-normalizer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60

  NormalizerLookup:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handler.handle
      Runtime: python3.8
      MemorySize: 128
      Layers:
        - !Ref DassanaActionsPythonLayer
        - !Ref DassanaWorkflowLayer
      CodeUri: ../actions/normalizer-lookup
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60

  AWSConfigViaSecurityHub:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/ac_handler.handle
      Runtime: python3.8
      MemorySize: 128
      Layers:
        - !Ref DassanaActionsPythonLayer
      CodeUri: ../actions/aws-config-via-sh
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60

  GuardDutyExtractor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/gd_handler.handle
      Runtime: python3.8
      MemorySize: 128
      Layers:
        - !Ref DassanaActionsPythonLayer
      CodeUri: ../actions/gd-via-sh
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60

  GetIAMPolicyRisks:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handle
      Runtime: python3.7
      CodeUri: ../actions/get-iam-policy-risks
      MemorySize: 2056
      Layers:
        - !Ref DassanaActionsPythonLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60

  GetBucketPolicy:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handler.handle
      Runtime: python3.7
      CodeUri: ../actions/get-bucket-policy
      Layers:
        - !Ref DassanaActionsPythonLayer
      Role:
        Fn::GetAtt: [DassanaActionsRole, Arn]
      Timeout: 60


### End Dassana Actions ###

Outputs:
  ApiGatewayEndpoint:
    Description: Api Gateway URL that you can use in https://editor.dassana.io/
    Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ApiGatewayStage}
    Export:
      Name: !Join ["", [{ "Ref": "AWS::StackName" }, "ApiUrl"]]

  ApiGatewayApiKey:
    Description: Please visit this URL and select the API gateway and then click "API keys",select the API key (e.g Dassana-apikey) and click on "Show" in the panel. Keep this API Key safe. It is a secret.
    Value: !Sub https://console.aws.amazon.com/apigateway/home?region=${AWS::Region}
    Export:
      Name: !Join ["", [{ "Ref": "AWS::StackName" }, "ApiKey"]]
